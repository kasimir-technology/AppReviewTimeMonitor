//
//  AppReviewTimeMonitorStyleKit.swift
//  ProjectName
//
//  Created by Alexander Kasimir on 26/10/15.
//  Copyright (c) 2015 kasimir.technology. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import Cocoa

public class AppReviewTimeMonitorStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfStatusBarError: NSImage?
    }

    //// Drawing Methods

    public class func drawStatusBarImage(dayLabel dayLabel: String = "99") {
        //// General Declarations
        _ = unsafeBitCast(NSGraphicsContext.currentContext()!.graphicsPort, CGContext.self)

        //// Rectangle Drawing
        let rectanglePath = NSBezierPath(roundedRect: NSMakeRect(1, 5, 20, 13), xRadius: 3, yRadius: 3)
        NSColor.blackColor().setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = NSMakeRect(3, 6, 16, 11)
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Center

        let textFontAttributes = [NSFontAttributeName: NSFont.labelFontOfSize(12), NSForegroundColorAttributeName: NSColor.blackColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: dayLabel).boundingRectWithSize(NSMakeSize(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes).size.height
        let textTextRect: NSRect = NSMakeRect(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        NSString(string: dayLabel).drawInRect(NSOffsetRect(textTextRect, 0, 1), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
    }

    public class func drawStatusBarError() {

        //// Rectangle Drawing
        let rectanglePath = NSBezierPath(roundedRect: NSMakeRect(1, 5.5, 20, 13), xRadius: 3, yRadius: 3)
        NSColor.blackColor().setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.moveToPoint(NSMakePoint(11.5, 14))
        bezierPath.lineToPoint(NSMakePoint(10.5, 14))
        bezierPath.curveToPoint(NSMakePoint(10.5, 12.87), controlPoint1: NSMakePoint(10.5, 14), controlPoint2: NSMakePoint(10.5, 13.48))
        bezierPath.curveToPoint(NSMakePoint(10.5, 11), controlPoint1: NSMakePoint(10.5, 12.02), controlPoint2: NSMakePoint(10.5, 11))
        bezierPath.lineToPoint(NSMakePoint(11.5, 11))
        bezierPath.lineToPoint(NSMakePoint(11.5, 14))
        bezierPath.closePath()
        bezierPath.moveToPoint(NSMakePoint(11.5, 10))
        bezierPath.lineToPoint(NSMakePoint(10.5, 10))
        bezierPath.curveToPoint(NSMakePoint(10.5, 9.22), controlPoint1: NSMakePoint(10.5, 10), controlPoint2: NSMakePoint(10.5, 9.51))
        bezierPath.curveToPoint(NSMakePoint(10.5, 9), controlPoint1: NSMakePoint(10.5, 9.09), controlPoint2: NSMakePoint(10.5, 9))
        bezierPath.lineToPoint(NSMakePoint(11.5, 9))
        bezierPath.lineToPoint(NSMakePoint(11.5, 10))
        bezierPath.closePath()
        bezierPath.moveToPoint(NSMakePoint(11, 16.75))
        bezierPath.lineToPoint(NSMakePoint(15.98, 8.13))
        bezierPath.lineToPoint(NSMakePoint(6.02, 8.13))
        bezierPath.curveToPoint(NSMakePoint(6.69, 9.28), controlPoint1: NSMakePoint(6.02, 8.13), controlPoint2: NSMakePoint(6.28, 8.58))
        bezierPath.curveToPoint(NSMakePoint(11, 16.75), controlPoint1: NSMakePoint(8.04, 11.63), controlPoint2: NSMakePoint(11, 16.75))
        bezierPath.closePath()
        NSColor.blackColor().setFill()
        bezierPath.fill()
    }

    //// Generated Images

    public class func imageOfStatusBarImage(dayLabel dayLabel: String = "99") -> NSImage {
        return NSImage(size: NSMakeSize(22, 22), flipped: false) { (NSRect) -> Bool in 
                AppReviewTimeMonitorStyleKit.drawStatusBarImage(dayLabel: dayLabel)

            return true
        }
    }

    public class var imageOfStatusBarError: NSImage {
        if Cache.imageOfStatusBarError != nil {
            return Cache.imageOfStatusBarError!
        }

        Cache.imageOfStatusBarError = NSImage(size: NSMakeSize(22, 22), flipped: false) { (NSRect) -> Bool in 
                AppReviewTimeMonitorStyleKit.drawStatusBarError()

            return true
        }

        return Cache.imageOfStatusBarError!
    }

}
